/**
 * - leetcode 136. 只出现一次的数字
 * 题目描述：
 * 	给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 * 	你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
 *	示例 1 ：
 *	输入：nums = [2,2,1]
 *	输出：1

 *	示例 2 ：
 *	输入：nums = [4,1,2,1,2]
 *	输出：4
 */

/**
 * - 算法思想：利用异或运算的性质
 * 	假设数组中有 2m + 1个数，其中m个数各出现两次，一个数只出现一次
 * 	令 a1、a2、a3、…… am为出现两次的数，am + 1为只出现一次的数
 * 	数组中全部元素的异或运算结果总是可以写成如下形式：
 * 		(a1 ⊕ a1)⊕(a2 ⊕ a2)⊕……⊕(am ⊕ am)⊕a(m+1) = a(m + 1)
 * 因此，数组中的全部元素的异或运算结果即为数组中只出现一次的数字
 */
const singleNumber = function (nums) {
  let single = nums[0];

  for (let i = 1; i < nums.length; i++) {
    single = single ^ nums[i];
  }

  return single;
};
