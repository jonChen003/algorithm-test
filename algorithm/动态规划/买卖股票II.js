/**
 * - leetcode 122. 买卖股票的最佳时机 II
 *
 * 题目描述：
 * 	给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
 *	在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
 *	返回 你能获得的 最大 利润

 *	示例 1：
 *	输入：prices = [7,1,5,3,6,4]
 *	输出：7
 *	解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
 *	随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
 *	总利润为 4 + 3 = 7 。
 */

/**
 * 参考文档：
 */

/**
 * 算法思想：动态规划
 * i 是下标
 * dp[i][0]: 第i天持有股票所得的现金
 * dp[i][1]: 第i天不持有股票所得的现金
 */
var maxProfit = function (prices) {
  // 确定dp数组
  const dp = Array.from(Array(prices.length), () => [0, 0]);

  // dp数组初始化
  dp[0][0] = -prices[0];
  dp[0][1] = 0;

  for (let i = 1; i < prices.length; i++) {
    // 如果第i天持有股票即dp[i][0]， 那么可以由两个状态推出来：
    // 1、昨天就持有股票，那么就保持现状，所得现金就是昨天持有股票的所得现金 即：dp[i - 1][0]
    // 2、今天才买入股票，所得现金就是昨天不持有股票的所得现金减去 今天的股票价格 即：dp[i - 1][1] - prices[i]
    dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] - prices[i]);

    // 如果第i天不持有股票即dp[i][1]的情况， 依然可以由两个状态推出来：
    // 1、昨天就不持有股票，那么就保持现状，所得现金就是昨天不持有股票的所得现金 即：dp[i - 1][1]
    // 2、今天卖出股票，所得现金就是按照今天股票佳价格卖出后所得现金即：prices[i] + dp[i - 1][0]
    dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
  }

  return dp[prices.length - 1][1];
};
