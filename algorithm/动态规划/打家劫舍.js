/**
 * - leetcode 198. 打家劫舍
 * 题目描述：
 * 	你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
 * 	如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * 	给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额
 *
 * 示例 1：
 *	输入：[1,2,3,1]
 *	输出：4
 *	解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *	偷窃到的最高金额 = 1 + 3 = 4 。
 */

/**
 * 算法思想：动态规划
 * 打家劫舍是DP解决的经典题目
 * 递推公式dp[i]：
 *  1、偷第i个房间：dp[i] = dp[i - 2] + nums[i]
 *  2、不偷第i个房间：dp[i] = dp[i - 1]
 */
const rob = function (nums) {
  const n = nums.length;
  // dp[i]: 下标i（包括i）以内的房屋，最多可以偷窃的金额为dp[i]
  const dp = Array(n).fill(0);
  // dp数组初始化
  dp[0] = nums[0];
  dp[1] = Math.max(nums[0], nums[1]);

  for (let i = 2; i < n; i++) {
    dp[i] = Math.max(nums[i] + dp[i - 2], dp[i - 1]);
  }

  return dp[n - 1];
};
